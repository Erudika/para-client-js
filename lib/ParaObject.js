/*
 * Copyright 2013-2018 Erudika. https://erudika.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For issues and patches go to: https://github.com/erudika
 */
'use strict';

var _ = require('lodash');

module.exports = ParaObject;

function ParaObject(id, type) {
	this.id = id || null;
	this.type = type || "sysprop";
	this.name = "ParaObject";
	this.stored = true;
	this.indexed = true;
	this.cached = true;
	this.version = 0;
}

/**
 * The id of an object. Usually an autogenerated unique string of numbers.
 *
 * @return the id
 */
ParaObject.prototype.getId = function () {
	return this.id;
};

/**
 * Sets a new id. Must not be null or empty.
 *
 * @param {String} id the new id
 */
ParaObject.prototype.setId = function (id) {
	this.id = id;
};

/**
 * The name of the object. Can be anything.
 *
 * @return {String} the name. default: [type id]
 */
ParaObject.prototype.getName = function () {
	return this.name;
};

/**
 * Sets a new name. Must not be null or empty.
 *
 * @param {String} name the new name
 */
ParaObject.prototype.setName = function (name) {
	this.name = name;
};

/**
 * The application name. Added to support multiple separate apps.
 * Every object must belong to an app.
 *
 * @return {String} the app id (name). default: para
 */
ParaObject.prototype.getAppid = function () {
	return this.appid;
};

/**
 * Sets a new app name. Must not be null or empty.
 *
 * @param {String} appid the new app id (name)
 */
ParaObject.prototype.setAppid = function (appid) {
	this.appid = appid;
};

/**
 * The id of the parent object.
 *
 * @return {String} the id of the parent or null
 */
ParaObject.prototype.getParentid = function () {
	return this.parentid;
};

/**
 * Sets a new parent id. Must not be null or empty.
 *
 * @param {String} parentid a new id
 */
ParaObject.prototype.setParentid = function (parentid) {
	this.parentid = parentid;
};

/**
 * The name of the object's class. This is equivalent to {@link Class#getSimpleName()}.toLowerCase().
 *
 * @return {String} the simple name of the class
 */
ParaObject.prototype.getType = function () {
	return this.type;
};

/**
 * Sets a new object type. Must not be null or empty.
 *
 * @param {String} type a new type
 */
ParaObject.prototype.setType = function (type) {
	this.type = type;
};

/**
 * The id of the user who created this. Should point to a {@link User} id.
 *
 * @return {String} the id or null
 */
ParaObject.prototype.getCreatorid = function () {
	return this.creatorid;
};

/**
 * Sets a new creator id. Must not be null or empty.
 *
 * @param {String} creatorid a new id
 */
ParaObject.prototype.setCreatorid = function (creatorid) {
	this.creatorid = creatorid;
};

/**
 * The plural name of the object. For example: user - users.
 *
 * @return {String} the plural name
 */
ParaObject.prototype.getPlural = function () {
	if (this.plural) {
		return this.plural;
	}
	return (this.type === null) ? this.type :
			_.endsWith(this.type, 's') ? this.type + "es" :
			_.endsWith(this.type, 'y') ? this.type.substring(0, this.type.length - 1) + "ies" : this.type + "s";
};

/**
 * The URI of this object. For example: /users/123.
 *
 * @return {String} the URI
 */
ParaObject.prototype.getObjectURI = function () {
	var def = "/" + this.getPlural();
	return this.id ? def + "/" + this.id : def;
};

/**
 * The time when the object was created, in milliseconds.
 *
 * @return {Number} the timestamp of creation
 */
ParaObject.prototype.getTimestamp = function () {
	return this.timestamp;
};

/**
 * Sets the timestamp.
 *
 * @param {Number} timestamp a new timestamp in milliseconds.
 */
ParaObject.prototype.setTimestamp = function (timestamp) {
	this.timestamp = timestamp;
};

/**
 * The last time this object was updated. Timestamp in ms.
 *
 * @return {Number} timestamp in milliseconds
 */
ParaObject.prototype.getUpdated = function () {
	return this.updated;
};

/**
 * Sets the last updated timestamp.
 *
 * @param {Number} updated a new timestamp
 */
ParaObject.prototype.setUpdated = function (updated) {
	this.updated = updated;
};

/**
 * The tags associated with this object. Tags must not be null or empty.
 *
 * @return {Array} a set of tags, or an empty set
 */
ParaObject.prototype.getTags = function () {
	return this.id;
};

/**
 * Merges the given tags with existing tags.
 *
 * @param {Array} tags the additional tags, or clears all tags if set to null
 */
ParaObject.prototype.setTags = function (tags) {
	this.tags = tags;
};

/**
 * The votes associated with this object.
 *
 * @return {Number} votes or 0
 */
ParaObject.prototype.getVotes = function () {
	return this.votes;
};

/**
 * Sets the votes.
 *
 * @param {Number} votes
 */
ParaObject.prototype.setVotes = function (votes) {
	this.votes = votes;
};

/**
 * The version of this object.
 *
 * @return {Number} version
 */
ParaObject.prototype.getVersion = function () {
	return this.version;
};

/**
 * Sets the version.
 *
 * @param {Number} version
 */
ParaObject.prototype.setVersion = function (version) {
	this.version = version;
};

/**
 * Boolean flag which controls whether this object is stored
 * in the database or not. Default is true.
 *
 * @return {Boolean} true if this object is stored in DB.
 */
ParaObject.prototype.getStored = function () {
	return this.stored;
};

/**
 * Sets the "isStored" flag.
 *
 * @param {Boolean} isStored when set to true, object is stored in DB.
 */
ParaObject.prototype.setStored = function (isStored) {
	this.stored = isStored;
};

/**
 * Boolean flat which controls whether this object is indexed
 * by the search engine. Default is true.
 *
 * @return {Boolean} true if this object is indexed
 */
ParaObject.prototype.getIndexed = function () {
	return this.indexed;
};

/**
 * Sets the "isIndexed" flag.
 *
 * @param {Boolean} isIndexed when set to true, object is indexed.
 */
ParaObject.prototype.setIndexed = function (isIndexed) {
	this.indexed = isIndexed;
};

/**
 * Boolean flat which controls whether this object is cached.
 * Default is true.
 *
 * @return {Boolean} true if this object is cached on update() and create().
 */
ParaObject.prototype.getCached = function () {
	return this.cached;
};

/**
 * Sets the "isCached" flag.
 *
 * @param {Boolean} isCached when set to true, object is cached.
 */
ParaObject.prototype.setCached = function (isCached) {
	this.cached = isCached;
};

/**
 * Populates this object with data from a map.
 * @param {Object} map
 * @return {ParaObject} this
 */
ParaObject.prototype.setFields = function (map) {
	if (map && map instanceof Object) {
		for (var key in map) {
			this[key] = map[key];
		}
	}
	return this;
};

