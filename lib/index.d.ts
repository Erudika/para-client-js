/** Declaration file generated by dts-gen */

export = ParaClient;

declare class ParaClient {
    constructor(accessKey: any, secretKey: any, options: any);

    addAppSetting(key: any, value: any, fn: any): any;

    addValidationConstraint(type: any, field: any, cons: any, fn: any): any;

    appSettings(key: any, fn: any): any;

    approximately(delta: any, fn: any): any;

    countChildren(obj: any, type2: any, fn: any): any;

    countLinks(obj: any, type2: any, fn: any): any;

    create(obj: any, fn: any): any;

    createAll(objects: any, fn: any): any;

    delete(obj: any, fn: any): any;

    deleteAll(keys: any, fn: any): any;

    deleteChildren(obj: any, type2: any, fn: any): any;

    findById(id: any, fn: any): any;

    findByIds(ids: any, fn: any): any;

    findChildren(obj: any, type2: any, query: any, pager: any, fn: any): any;

    findLinkedObjects(obj: any, type2: any, field: any, query: any, pager: any, fn: any): any;

    findNearby(type: any, query: any, radius: any, lat: any, lng: any, pager: any, fn: any): any;

    findNestedQuery(type: any, field: any, query: any, pager: any, fn: any): any;

    findPrefix(type: any, field: any, prefix: any, pager: any, fn: any): any;

    findQuery(type: any, query: any, pager: any, fn: any): any;

    findSimilar(type: any, filterKey: any, fields: any, liketext: any, pager: any, fn: any): any;

    findTagged(type: any, tags: any, pager: any, fn: any): any;

    findTags(keyword: any, pager: any, fn: any): any;

    findTermInList(type: any, field: any, terms: any, pager: any, fn: any): any;

    findTerms(type: any, terms: any, matchAll: any, pager: any, fn: any): any;

    findWildcard(type: any, field: any, wildcard: any, pager: any, fn: any): any;

    formatDate(format: any, locale: any, fn: any): any;

    getApp(fn: any): any;

    getChildren(obj: any, type2: any, field: any, term: any, pager: any, fn: any): any;

    getCount(type: any, terms: any, fn: any): any;

    getLinkedObjects(obj: any, type2: any, pager: any, fn: any): any;

    getTimestamp(fn: any): any;

    grantResourcePermission(subjectid: any, resourcePath: any, permission: any, allowGuestAccess: any, fn: any): any;

    isAllowedTo(subjectid: any, resourcePath: any, httpMethod: any, fn: any): any;

    isLinked(obj: any, type2: any, id2: any, fn: any): any;

    isLinkedToObject(obj: any, toObj: any, fn: any): any;

    link(obj: any, id2: any, fn: any): any;

    list(type: any, pager: any, fn: any): any;

    markdownToHtml(markdownString: any, fn: any): any;

    me(accessToken: any, fn: any): any;

    newId(fn: any): any;

    newKeys(fn: any): any;

    noSpaces(str: any, replaceWith: any, fn: any): any;

    read(type: any, id: any, fn: any): any;

    readAll(keys: any, fn: any): any;

    rebuildIndex(destinationIndex: any, fn: any): any;

    refreshToken(fn: any): any;

    removeAppSetting(key: any, fn: any): any;

    removeValidationConstraint(type: any, field: any, constraintName: any, fn: any): any;

    resourcePermissions(subjectid: any, fn: any): any;

    revokeAllResourcePermissions(subjectid: any, fn: any): any;

    revokeAllTokens(fn: any): any;

    revokeResourcePermission(subjectid: any, resourcePath: any, fn: any): any;

    setAppSettings(settings: any, fn: any): any;

    signIn(provider: any, providerToken: any, rememberJWT: any, fn: any): any;

    signOut(): void;

    stripAndTrim(str: any, fn: any): any;

    types(fn: any): any;

    unlink(obj: any, type2: any, id2: any, fn: any): any;

    unlinkAll(obj: any, fn: any): any;

    update(obj: any, fn: any): any;

    updateAll(objects: any, fn: any): any;

    validationConstraints(type: any, fn: any): any;

    voteDown(obj: any, voterid: any, fn: any): any;

    voteUp(obj: any, voterid: any, fn: any): any;

    static Constraint(constraintName: any, constraintPayload: any): any;

    static Pager(page: any, sortby: any, desc: any, limit: any): void;

}

declare namespace ParaClient {
    class ParaObject {
        constructor(id: any, type: any);

        getAppid(): any;

        getCached(): any;

        getCreatorid(): any;

        getId(): any;

        getIndexed(): any;

        getName(): any;

        getObjectURI(): any;

        getParentid(): any;

        getPlural(): any;

        getStored(): any;

        getTags(): any;

        getTimestamp(): any;

        getType(): any;

        getUpdated(): any;

        getVotes(): any;

        setAppid(appid: any): void;

        setCached(isCached: any): void;

        setCreatorid(creatorid: any): void;

        setFields(map: any): any;

        setId(id: any): void;

        setIndexed(isIndexed: any): void;

        setName(name: any): void;

        setParentid(parentid: any): void;

        setStored(isStored: any): void;

        setTags(tags: any): void;

        setTimestamp(timestamp: any): void;

        setType(type: any): void;

        setUpdated(updated: any): void;

        setVotes(votes: any): void;

    }

    namespace Constraint {
        const prototype: {
        };

        function digits(i: any, f: any): any;

        function email(): any;

        function falsy(): any;

        function future(): any;

        function max(max: any): any;

        function min(min: any): any;

        function past(): any;

        function pattern(regex: any): any;

        function required(): any;

        function size(min: any, max: any): any;

        function truthy(): any;

        function url(): any;

        namespace digits {
            const prototype: {
            };

        }

        namespace email {
            const prototype: {
            };

        }

        namespace falsy {
            const prototype: {
            };

        }

        namespace future {
            const prototype: {
            };

        }

        namespace max {
            const prototype: {
            };

        }

        namespace min {
            const prototype: {
            };

        }

        namespace past {
            const prototype: {
            };

        }

        namespace pattern {
            const prototype: {
            };

        }

        namespace required {
            const prototype: {
            };

        }

        namespace size {
            const prototype: {
            };

        }

        namespace truthy {
            const prototype: {
            };

        }

        namespace url {
            const prototype: {
            };

        }

    }

    namespace Pager {
        const prototype: {
        };

    }

    namespace ParaObject {
        namespace prototype {
            function getAppid(): any;

            function getCached(): any;

            function getCreatorid(): any;

            function getId(): any;

            function getIndexed(): any;

            function getName(): any;

            function getObjectURI(): any;

            function getParentid(): any;

            function getPlural(): any;

            function getStored(): any;

            function getTags(): any;

            function getTimestamp(): any;

            function getType(): any;

            function getUpdated(): any;

            function getVotes(): any;

            function setAppid(appid: any): void;

            function setCached(isCached: any): void;

            function setCreatorid(creatorid: any): void;

            function setFields(map: any): any;

            function setId(id: any): void;

            function setIndexed(isIndexed: any): void;

            function setName(name: any): void;

            function setParentid(parentid: any): void;

            function setStored(isStored: any): void;

            function setTags(tags: any): void;

            function setTimestamp(timestamp: any): void;

            function setType(type: any): void;

            function setUpdated(updated: any): void;

            function setVotes(votes: any): void;

            namespace getAppid {
                const prototype: {
                };

            }

            namespace getCached {
                const prototype: {
                };

            }

            namespace getCreatorid {
                const prototype: {
                };

            }

            namespace getId {
                const prototype: {
                };

            }

            namespace getIndexed {
                const prototype: {
                };

            }

            namespace getName {
                const prototype: {
                };

            }

            namespace getObjectURI {
                const prototype: {
                };

            }

            namespace getParentid {
                const prototype: {
                };

            }

            namespace getPlural {
                const prototype: {
                };

            }

            namespace getStored {
                const prototype: {
                };

            }

            namespace getTags {
                const prototype: {
                };

            }

            namespace getTimestamp {
                const prototype: {
                };

            }

            namespace getType {
                const prototype: {
                };

            }

            namespace getUpdated {
                const prototype: {
                };

            }

            namespace getVotes {
                const prototype: {
                };

            }

            namespace setAppid {
                const prototype: {
                };

            }

            namespace setCached {
                const prototype: {
                };

            }

            namespace setCreatorid {
                const prototype: {
                };

            }

            namespace setFields {
                const prototype: {
                };

            }

            namespace setId {
                const prototype: {
                };

            }

            namespace setIndexed {
                const prototype: {
                };

            }

            namespace setName {
                const prototype: {
                };

            }

            namespace setParentid {
                const prototype: {
                };

            }

            namespace setStored {
                const prototype: {
                };

            }

            namespace setTags {
                const prototype: {
                };

            }

            namespace setTimestamp {
                const prototype: {
                };

            }

            namespace setType {
                const prototype: {
                };

            }

            namespace setUpdated {
                const prototype: {
                };

            }

            namespace setVotes {
                const prototype: {
                };

            }

        }

    }

    namespace prototype {
        function addAppSetting(key: any, value: any, fn: any): any;

        function addValidationConstraint(type: any, field: any, cons: any, fn: any): any;

        function appSettings(key: any, fn: any): any;

        function approximately(delta: any, fn: any): any;

        function countChildren(obj: any, type2: any, fn: any): any;

        function countLinks(obj: any, type2: any, fn: any): any;

        function create(obj: any, fn: any): any;

        function createAll(objects: any, fn: any): any;

        function deleteAll(keys: any, fn: any): any;

        function deleteChildren(obj: any, type2: any, fn: any): any;

        function findById(id: any, fn: any): any;

        function findByIds(ids: any, fn: any): any;

        function findChildren(obj: any, type2: any, query: any, pager: any, fn: any): any;

        function findLinkedObjects(obj: any, type2: any, field: any, query: any, pager: any, fn: any): any;

        function findNearby(type: any, query: any, radius: any, lat: any, lng: any, pager: any, fn: any): any;

        function findNestedQuery(type: any, field: any, query: any, pager: any, fn: any): any;

        function findPrefix(type: any, field: any, prefix: any, pager: any, fn: any): any;

        function findQuery(type: any, query: any, pager: any, fn: any): any;

        function findSimilar(type: any, filterKey: any, fields: any, liketext: any, pager: any, fn: any): any;

        function findTagged(type: any, tags: any, pager: any, fn: any): any;

        function findTags(keyword: any, pager: any, fn: any): any;

        function findTermInList(type: any, field: any, terms: any, pager: any, fn: any): any;

        function findTerms(type: any, terms: any, matchAll: any, pager: any, fn: any): any;

        function findWildcard(type: any, field: any, wildcard: any, pager: any, fn: any): any;

        function formatDate(format: any, locale: any, fn: any): any;

        function getApp(fn: any): any;

        function getChildren(obj: any, type2: any, field: any, term: any, pager: any, fn: any): any;

        function getCount(type: any, terms: any, fn: any): any;

        function getLinkedObjects(obj: any, type2: any, pager: any, fn: any): any;

        function getTimestamp(fn: any): any;

        function grantResourcePermission(subjectid: any, resourcePath: any, permission: any, allowGuestAccess: any, fn: any): any;

        function isAllowedTo(subjectid: any, resourcePath: any, httpMethod: any, fn: any): any;

        function isLinked(obj: any, type2: any, id2: any, fn: any): any;

        function isLinkedToObject(obj: any, toObj: any, fn: any): any;

        function link(obj: any, id2: any, fn: any): any;

        function list(type: any, pager: any, fn: any): any;

        function markdownToHtml(markdownString: any, fn: any): any;

        function me(accessToken: any, fn: any): any;

        function newId(fn: any): any;

        function newKeys(fn: any): any;

        function noSpaces(str: any, replaceWith: any, fn: any): any;

        function read(type: any, id: any, fn: any): any;

        function readAll(keys: any, fn: any): any;

        function refreshToken(fn: any): any;

        function removeAppSetting(key: any, fn: any): any;

        function removeValidationConstraint(type: any, field: any, constraintName: any, fn: any): any;

        function resourcePermissions(subjectid: any, fn: any): any;

        function revokeAllResourcePermissions(subjectid: any, fn: any): any;

        function revokeAllTokens(fn: any): any;

        function revokeResourcePermission(subjectid: any, resourcePath: any, fn: any): any;

        function setAppSettings(settings: any, fn: any): any;

        function signIn(provider: any, providerToken: any, rememberJWT: any, fn: any): any;

        function signOut(): void;

        function stripAndTrim(str: any, fn: any): any;

        function types(fn: any): any;

        function unlink(obj: any, type2: any, id2: any, fn: any): any;

        function unlinkAll(obj: any, fn: any): any;

        function update(obj: any, fn: any): any;

        function updateAll(objects: any, fn: any): any;

        function validationConstraints(type: any, fn: any): any;

        function voteDown(obj: any, voterid: any, fn: any): any;

        function voteUp(obj: any, voterid: any, fn: any): any;

        namespace addAppSetting {
            const prototype: {
            };

        }

        namespace addValidationConstraint {
            const prototype: {
            };

        }

        namespace appSettings {
            const prototype: {
            };

        }

        namespace approximately {
            const prototype: {
            };

        }

        namespace countChildren {
            const prototype: {
            };

        }

        namespace countLinks {
            const prototype: {
            };

        }

        namespace create {
            const prototype: {
            };

        }

        namespace createAll {
            const prototype: {
            };

        }

        namespace deleteAll {
            const prototype: {
            };

        }

        namespace deleteChildren {
            const prototype: {
            };

        }

        namespace findById {
            const prototype: {
            };

        }

        namespace findByIds {
            const prototype: {
            };

        }

        namespace findChildren {
            const prototype: {
            };

        }

        namespace findLinkedObjects {
            const prototype: {
            };

        }

        namespace findNearby {
            const prototype: {
            };

        }

        namespace findNestedQuery {
            const prototype: {
            };

        }

        namespace findPrefix {
            const prototype: {
            };

        }

        namespace findQuery {
            const prototype: {
            };

        }

        namespace findSimilar {
            const prototype: {
            };

        }

        namespace findTagged {
            const prototype: {
            };

        }

        namespace findTags {
            const prototype: {
            };

        }

        namespace findTermInList {
            const prototype: {
            };

        }

        namespace findTerms {
            const prototype: {
            };

        }

        namespace findWildcard {
            const prototype: {
            };

        }

        namespace formatDate {
            const prototype: {
            };

        }

        namespace getApp {
            const prototype: {
            };

        }

        namespace getChildren {
            const prototype: {
            };

        }

        namespace getCount {
            const prototype: {
            };

        }

        namespace getLinkedObjects {
            const prototype: {
            };

        }

        namespace getTimestamp {
            const prototype: {
            };

        }

        namespace grantResourcePermission {
            const prototype: {
            };

        }

        namespace isAllowedTo {
            const prototype: {
            };

        }

        namespace isLinked {
            const prototype: {
            };

        }

        namespace isLinkedToObject {
            const prototype: {
            };

        }

        namespace link {
            const prototype: {
            };

        }

        namespace list {
            const prototype: {
            };

        }

        namespace markdownToHtml {
            const prototype: {
            };

        }

        namespace me {
            const prototype: {
            };

        }

        namespace newId {
            const prototype: {
            };

        }

        namespace newKeys {
            const prototype: {
            };

        }

        namespace noSpaces {
            const prototype: {
            };

        }

        namespace read {
            const prototype: {
            };

        }

        namespace readAll {
            const prototype: {
            };

        }

        namespace refreshToken {
            const prototype: {
            };

        }

        namespace removeAppSetting {
            const prototype: {
            };

        }

        namespace removeValidationConstraint {
            const prototype: {
            };

        }

        namespace resourcePermissions {
            const prototype: {
            };

        }

        namespace revokeAllResourcePermissions {
            const prototype: {
            };

        }

        namespace revokeAllTokens {
            const prototype: {
            };

        }

        namespace revokeResourcePermission {
            const prototype: {
            };

        }

        namespace setAppSettings {
            const prototype: {
            };

        }

        namespace signIn {
            const prototype: {
            };

        }

        namespace signOut {
            const prototype: {
            };

        }

        namespace stripAndTrim {
            const prototype: {
            };

        }

        namespace types {
            const prototype: {
            };

        }

        namespace unlink {
            const prototype: {
            };

        }

        namespace unlinkAll {
            const prototype: {
            };

        }

        namespace update {
            const prototype: {
            };

        }

        namespace updateAll {
            const prototype: {
            };

        }

        namespace validationConstraints {
            const prototype: {
            };

        }

        namespace voteDown {
            const prototype: {
            };

        }

        namespace voteUp {
            const prototype: {
            };

        }

    }

}

